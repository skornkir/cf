<?php

function tasks_menu(){
    $items['task/%'] = array(
        'title' => '',
        'page callback' => "tasks_page",
        'page arguments' => array(1),
        'access callback' => 'user_access',
        'access arguments' => array('view task'),
    );

    $items['task/%/delete'] = array(
        'page callback' => 'task_delete',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type'=>MENU_CALLBACK,
    );

    $items['task/new'] = array(
        'title' => '',
        'page callback' => "drupal_get_form",
        'page arguments' => array('tasks_create_task_form'),
        'access callback' => TRUE,
    );
    return $items;
}

function tasks_permission(){
    return array(
        'view task' => array(
            'title' => t('View task'),
            'description' => t('View task'),
        )
    );
}

function task_delete($nid){
    global $user;
    if(in_array(3,array_keys($user->roles))){
        $nid = $_POST['id'];
        node_delete($nid);
    }
    drupal_json_output(array());
    drupal_exit();
}

function tasks_page($nid){
    $node = node_load($nid);
    $path = drupal_get_path('module', 'tasks');
    drupal_add_js($path . "/js/task.js");
    drupal_add_css("sites/all/modules/_custom/tasks" . "/css/styles.css");
    $executor = user_load($node->field_executor['und'][0]['uid']);
    $priority = taxonomy_term_load($node->field_priority['und'][0]['tid']);
    $status = taxonomy_term_load($node->field_status_task['und'][0]['tid']);
    $project = taxonomy_term_load($node->field_project['und'][0]['tid']);
    $body = (isset($node->body['und'][0]['value'])) ? $node->body['und'][0]['value'] : "";
    $data = array(
        'id' => $nid,
        'title' => $node->title,
        'body' => $body,
        'executor' => $executor->name,
        'priority' => $priority->name,
        'created' => date('d.m.y H:i'),
        'status' => $status->name,
        'project' => $project->name,
    );
    $output = theme('task',array('data' => $data));
    return $output;
}

function tasks_theme(){
    return array(
        'task' => array(
            'template' => 'templates/task',
            'variables' => array('data' => array()),
        )
    );
}

function tasks_create_task_form($form, $form_state){
    $form['info'] = array(
        '#type' => 'fieldset',
        '#title' => 'Новая задача',
        '#collapbsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $form['info']['title'] = array(
        '#type' => 'textfield',
        '#title' => 'Название',
    );

    if(isset($_GET['title'])){
        $form['info']['title']['#default_value'] = $_GET['title'];
    }

    $vid_priority = 7;
    $priority_tree = taxonomy_get_tree($vid_priority);
    foreach($priority_tree as $item){
        $tid = $item->tid;
        $priority_options[$tid] = $item->name;
    }

    $form['info']['priority'] = array(
        '#type' => 'select',
        '#title' => 'Приоритет',
        '#options' => $priority_options,
        '#required' => TRUE,
        '#default_value' => 11,
    );


    $form['info']['executor'] = array(
        '#type' => 'select',
        '#title' => 'Исполнитель',
        '#options' => array(1 => 'kir', 3 => 'alex'),
        '#required' => TRUE,
        '#default_value' => 1
    );

    $vid_status = 8;
    $status_tree = taxonomy_get_tree($vid_status);
    foreach($status_tree as $item){
        $tid = $item->tid;
        $status_options[$tid] = $item->name;
    }

    $form['info']['status'] = array(
        '#type' => 'select',
        '#title' => 'Статус',
        '#options' => $status_options,
        '#required' => TRUE,
        '#default_value' => 13
    );

    $vid_project = 9;
    $project_tree = taxonomy_get_tree($vid_project);
    foreach($project_tree as $item){
        $tid = $item->tid;
        $project_options[$tid] = $item->name;
    }
    ddl($project_options);
    $form['info']['project'] = array(
        '#type' => 'select',
        '#title' => 'Проект',
        '#options' => $project_options,
        '#required' => TRUE,
        '#default_value' => array_shift(array_keys($project_options))
    );


    $form['info']['text'] = array(
        '#type' => 'text_format',
        // '#title' => 'Комментарий',
        '#resizable' => FALSE,
        '#format' => 'filtered_html',
        '#rows' => 10,
        '#title' => 'Текст задачи',
    );

    if(isset($_GET['text'])){
        $form['info']['text']['#default_value'] = $_GET['body'];
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Создать задачу',
    );

    return $form;

}

function tasks_form_views_exposed_form_alter(&$form, $form_state){
    $form['field_executor_uid']['#default_value'] = 'All';
    $form['field_executor_uid']['#options']['All'] = 'Любой';
    $form['field_status_task_tid']['#default_value'] = 'All';
    $form['field_status_task_tid']['#options']['All'] = 'Любой';
    $form['field_project_tid']['#default_value'] = 'All';
    $form['field_project_tid']['#options']['All'] = 'Любой';
    $form['field_priority_tid']['#default_value'] = 'All';
    $form['field_priority_tid']['#options']['All'] = 'Любой';
    foreach ($form_state['view']->filter as $field => $filter) {
//        if ($filter->options['exposed'] && $filter->options['id'] == $nodeid_filter) {
//            $nodeids = array(
//                2    => 'Title 1',
//                5    => 'Title 2',
//                10   => 'Title 3'
//            );
//            $form[$nodeid_filter]['#options'] = $nodeids;
//            if(array_key_exists($nodeid, $nodeids)) {
//                $form[$nodeid_filter]['#default_value'] = $nodeid;
//            }
//        }
    }
}

function tasks_create_task_form_submit($form, $form_state){
    global $user;
    $node = new stdClass();
    $node->title = $form_state['values']['title'];
    $node->type = "tasks";
    node_object_prepare($node);
    $node->uid = $user->uid;
    $node->status = 1;
    $node->field_priority['und'][0]['tid'] = $form_state['values']['priority'];
    $node->field_status_task['und'][0]['tid'] = $form_state['values']['status'];
    $node->field_executor['und'][0]['uid'] = $form_state['values']['executor'];
    $node->field_project['und'][0]['tid'] = $form_state['values']['project'];
//    $node = node_submit($node);
    node_save($node);
    drupal_goto('tasks');
}

function tasks_comment_form($form, $form_state){
    $nid = arg(1);
    $task = node_load($nid);

    $form['info'] = array(
        '#type' => 'fieldset',
        '#title' => 'Редактировать',
        '#collapbsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $vid_priority = 7;
    $priority_tree = taxonomy_get_tree($vid_priority);
    foreach($priority_tree as $item){
        $tid = $item->tid;
        $priority_options[$tid] = $item->name;
    }

    $form['info']['priority'] = array(
        '#type' => 'select',
        '#title' => 'Приоритет:',
        '#options' => $priority_options,
        '#default_value' => $task->field_priority['und'][0]['tid'],
    );

    $form['info']['executor'] = array(
        '#type' => 'select',
        '#title' => 'Исполнитель:',
        '#options' => array(1 => 'kir', 3 => 'alex'),
        '#default_value' => $task->field_executor['und'][0]['uid'],
    );

    $vid_status = 8;
    $status_tree = taxonomy_get_tree($vid_status);
    foreach($status_tree as $item){
        $tid = $item->tid;
        $status_options[$tid] = $item->name;
    }
    $form['info']['status'] = array(
        '#type' => 'select',
        '#title' => 'Статус:',
        '#options' => $status_options,
        '#default_value' => $task->field_status_task['und'][0]['tid'],
    );

    $vid_project = 9;
    $project_tree = taxonomy_get_tree($vid_project);
    foreach($project_tree as $item){
        $tid = $item->tid;
        $project_options[$tid] = $item->name;
    }

    $form['info']['project'] = array(
        '#type' => 'select',
        '#title' => 'Проект',
        '#options' => $project_options,
        '#default_value' => $task->field_project['und'][0]['tid'],
    );

//    $form['comment'] = array(
//        '#type' => 'fieldset',
//        '#title' => 'Новый комментарий',
//        '#collapbsible' => FALSE,
//        '#collapsed' => FALSE,
//    );


    $form['info']['text'] = array(
        '#title' => t('Комментарий') . ":",
        '#type' => 'text_format',
       // '#title' => 'Комментарий',
        '#resizable' => FALSE,
        '#format' => 'filtered_html',
        '#rows' => 10,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Оставить комментарий',
    );

    $form['cancel'] = array(
        '#markup' => '<div class="cancel">Отменить</div>',
    );

    return $form;
}

function tasks_comment_form_submit($form, $form_state){
    $nid = arg(1);
    $task = node_load($nid);
    $result = "<ul class='list-changes'>";
        if($form_state['values']['priority'] != $task->field_priority['und'][0]['tid']){
            $term = taxonomy_term_load($form_state['values']['priority']);
            $result .= "<li>Изменился приоритет на '{$term->name}' </li>";
            $task->field_priority['und'][0]['tid'] = $form_state['values']['priority'];
        }

        if($form_state['values']['status'] != $task->field_status_task['und'][0]['tid']){
            $term = taxonomy_term_load($form_state['values']['status']);
            $result .= "<li>Изменился статус на '{$term->name}' </li>";
            $task->field_status_task['und'][0]['tid'] = $form_state['values']['status'];
        }

        if($form_state['values']['executor'] != $task->field_executor['und'][0]['uid']){
            $user = user_load($form_state['values']['executor']);
            $result .= "<li>Изменился исполнитель задачи на '{$user->name}' </li>";
            $task->field_executor['und'][0]['uid'] = $form_state['values']['executor'];
        }
        if($form_state['values']['project'] != $task->field_project['und'][0]['tid']){
            $term = taxonomy_term_load($form_state['values']['project']);
            $result .= "<li>Изменился проект на '{$term->name}' </li>";
            $task->field_project['und'][0]['tid'] = $form_state['values']['project'];
        }
        node_save($task);
    $result .= "</ul>";
    $result .= $form_state['values']['text']['value'];
    tasks_create_comment($nid, $result);
    drupal_set_message('Комментарий создан');
}

function tasks_create_task($text){

}

function tasks_create_comment($nid, $text){
    global $user;
    $comment = new stdClass();
    $comment->nid = $nid; // nid of a node you want to attach a comment to
    $comment->cid = 0;
    $comment->pid = 0;
    $comment->uid = $user->uid;
    $comment->mail = $user->mail;
    $comment->name = $user->name; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
    $comment->thread = '01/';
    $comment->hostname = '127.0.01';
    $comment->created = time();
    $comment->is_anonymous = 0; // leave it as is
    $comment->homepage = '';
    $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
    $comment->language = LANGUAGE_NONE;
    $comment->subject = 'Comment subject';
    $comment->comment_body[$comment->language][0]['value'] = $text;
    $comment->comment_body[$comment->language][0]['format'] = 'filtered_html';
    comment_submit($comment); // saving a comment
    comment_save($comment);
}


function tasks_views_pre_view(&$view) {
    switch ($view->name) {
        case 'tasks': {
            $view_filters = $view->display_handler->get_option('filters');
            global $user;
            $view_filters['field_executor_uid']['value'] = array($user->uid => $user->uid);
            $view->display_handler->override_option('filters', $view_filters);
            break;
        }
    }
}